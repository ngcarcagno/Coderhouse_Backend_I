<div class="real-time-container">
    <header>
        <h1>üöÄ Products Management - Real Time</h1>
        <div class="status-indicator">
            <span id="connectionStatus" class="disconnected">‚óè</span>
            <span id="statusText">Connecting...</span>
        </div>
    </header>

    <!-- Formulario para agregar productos -->
    <div class="form-section">
        <h2>‚ûï Add New Product</h2>
        <form id="addProductForm">
            <div class="form-row">
                <input type="text" id="title" placeholder="Product Title" required>
                <input type="text" id="description" placeholder="Description" required>
            </div>
            <div class="form-row">
                <input type="text" id="code" placeholder="Product Code" required>
                <input type="number" id="price" placeholder="Price" step="0.01" required>
            </div>
            <div class="form-row">
                <input type="number" id="stock" placeholder="Stock" required>
                <select id="category" required>
                    <option value="">Select Category</option>
                    <option value="electronics">Electronics</option>
                    <option value="clothing">Clothing</option>
                    <option value="home">Home</option>
                    <option value="books">Books</option>
                    <option value="sports">Sports</option>
                </select>
            </div>
            <button type="submit" class="add-btn">Add Product</button>
        </form>
    </div>

    <!-- Lista de productos en tiempo real -->
    <div class="products-section">
        <h2>üì¶ Products List ({{products.length}} items)</h2>
        <div id="productsContainer">
            {{#if products.length}}
                <div class="products-grid">
                    {{#each products}}
                    <div class="product-card" data-id="{{this.id}}">
                        <div class="product-header">
                            <h3>{{this.title}}</h3>
                            <button class="delete-btn" onclick="deleteProduct('{{this.id}}')" title="Delete Product">üóëÔ∏è</button>
                        </div>
                        <p class="product-description">{{this.description}}</p>
                        <div class="product-details">
                            <span class="price">${{this.price}}</span>
                            <span class="stock">Stock: {{this.stock}}</span>
                            <span class="category">{{this.category}}</span>
                        </div>
                        <div class="product-meta">
                            <small>Code: {{this.code}} | Status: {{#if this.status}}‚úÖ Active{{else}}‚ùå Inactive{{/if}}</small>
                        </div>
                    </div>
                    {{/each}}
                </div>
            {{else}}
                <div class="empty-state">
                    <p>üîç No products found. Add your first product above!</p>
                </div>
            {{/if}}
        </div>
    </div>

    <!-- Mensajes de estado -->
    <div id="messages" class="messages"></div>
</div>

<!-- Estilos CSS -->
<style>
    .real-time-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 10px;
    }

    .status-indicator {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    #connectionStatus {
        font-size: 20px;
    }

    .connected { color: #28a745; }
    .disconnected { color: #dc3545; }

    .form-section {
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 30px;
    }

    .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
    }

    .form-row input, .form-row select {
        flex: 1;
        padding: 12px;
        border: 2px solid #e9ecef;
        border-radius: 6px;
        font-size: 14px;
    }

    .form-row input:focus, .form-row select:focus {
        outline: none;
        border-color: #4a90e2;
    }

    .add-btn {
        background: linear-gradient(135deg, #28a745, #20c997);
        color: white;
        padding: 12px 30px;
        border: none;
        border-radius: 6px;
        font-size: 16px;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .add-btn:hover {
        transform: translateY(-2px);
    }

    .products-section {
        background: white;
        padding: 25px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .product-card {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 20px;
        transition: all 0.3s ease;
    }

    .product-card:hover {
        border-color: #4a90e2;
        transform: translateY(-2px);
    }

    .product-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .product-header h3 {
        margin: 0;
        color: #333;
    }

    .delete-btn {
        background: #dc3545;
        color: white;
        border: none;
        padding: 8px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .product-description {
        color: #666;
        margin-bottom: 15px;
    }

    .product-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .price {
        font-weight: bold;
        font-size: 18px;
        color: #28a745;
    }

    .stock {
        background: #e9ecef;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
    }

    .category {
        background: #4a90e2;
        color: white;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 12px;
    }

    .product-meta {
        font-size: 12px;
        color: #999;
        border-top: 1px solid #e9ecef;
        padding-top: 10px;
    }

    .empty-state {
        text-align: center;
        color: #666;
        font-size: 18px;
        padding: 40px;
    }

    .messages {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
    }

    .message {
        background: white;
        border: 2px solid;
        padding: 15px 20px;
        border-radius: 6px;
        margin-bottom: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        animation: slideIn 0.3s ease;
    }

    .message.success {
        border-color: #28a745;
        color: #28a745;
    }

    .message.error {
        border-color: #dc3545;
        color: #dc3545;
    }

    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }

    /* Animaciones para productos */
    .product-card.new {
        animation: productAppear 0.5s ease;
    }

    .product-card.removing {
        animation: productDisappear 0.3s ease;
    }

    @keyframes productAppear {
        from { opacity: 0; transform: scale(0.8) translateY(20px); }
        to { opacity: 1; transform: scale(1) translateY(0); }
    }

    @keyframes productDisappear {
        from { opacity: 1; transform: scale(1); }
        to { opacity: 0; transform: scale(0.8); }
    }
</style>

<!-- JavaScript para Socket.io -->
<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    let isConnected = false;

    // Referencias a elementos DOM
    const statusIndicator = document.getElementById('connectionStatus');
    const statusText = document.getElementById('statusText');
    const addProductForm = document.getElementById('addProductForm');
    const productsContainer = document.getElementById('productsContainer');
    const messagesContainer = document.getElementById('messages');

    // Conexi√≥n establecida
    socket.on('connect', () => {
        isConnected = true;
        statusIndicator.className = 'connected';
        statusText.textContent = 'Connected';
        showMessage('üü¢ Connected to server', 'success');
        socket.emit('requestProducts');
    });

    // Conexi√≥n perdida
    socket.on('disconnect', () => {
        isConnected = false;
        statusIndicator.className = 'disconnected';
        statusText.textContent = 'Disconnected';
        showMessage('üî¥ Connection lost', 'error');
    });

    // Actualizar lista de productos
    socket.on('updateProducts', (products) => {
        updateProductsDisplay(products);
    });

    // Respuesta al agregar producto
    socket.on('productAdded', (response) => {
        if (response.success) {
            showMessage('‚úÖ Product added successfully!', 'success');
            addProductForm.reset();
        } else {
            showMessage('‚ùå Error adding product: ' + response.error, 'error');
        }
    });

    // Respuesta al eliminar producto
    socket.on('productDeleted', (response) => {
        if (response.success) {
            showMessage('üóëÔ∏è Product deleted successfully!', 'success');
        } else {
            showMessage('‚ùå Error deleting product: ' + response.error, 'error');
        }
    });

    // Manejar formulario de agregar producto
    addProductForm.addEventListener('submit', (e) => {
        e.preventDefault();

        if (!isConnected) {
            showMessage('‚ùå Not connected to server', 'error');
            return;
        }

        const productData = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            code: document.getElementById('code').value,
            price: parseFloat(document.getElementById('price').value),
            stock: parseInt(document.getElementById('stock').value),
            category: document.getElementById('category').value,
            status: true,
            thumbnails: []
        };

        socket.emit('addProduct', productData);
    });

    // Funci√≥n para eliminar producto
    function deleteProduct(productId) {
        if (!isConnected) {
            showMessage('‚ùå Not connected to server', 'error');
            return;
        }

        if (confirm('Are you sure you want to delete this product?')) {
            socket.emit('deleteProduct', productId);
        }
    }

    // Actualizar display de productos
    function updateProductsDisplay(products) {
        const isEmpty = !products || products.length === 0;

        if (isEmpty) {
            productsContainer.innerHTML = `
                <div class="empty-state">
                    <p>üîç No products found. Add your first product above!</p>
                </div>
            `;
        } else {
            const productsHTML = products.map(product => `
                <div class="product-card new" data-id="${product.id}">
                    <div class="product-header">
                        <h3>${product.title}</h3>
                        <button class="delete-btn" onclick="deleteProduct('${product.id}')" title="Delete Product">üóëÔ∏è</button>
                    </div>
                    <p class="product-description">${product.description}</p>
                    <div class="product-details">
                        <span class="price">$${product.price}</span>
                        <span class="stock">Stock: ${product.stock}</span>
                        <span class="category">${product.category}</span>
                    </div>
                    <div class="product-meta">
                        <small>Code: ${product.code} | Status: ${product.status ? '‚úÖ Active' : '‚ùå Inactive'}</small>
                    </div>
                </div>
            `).join('');

            productsContainer.innerHTML = `
                <div class="products-section">
                    <h2>üì¶ Products List (${products.length} items)</h2>
                    <div class="products-grid">
                        ${productsHTML}
                    </div>
                </div>
            `;
        }

        // Remover clase 'new' despu√©s de la animaci√≥n
        setTimeout(() => {
            document.querySelectorAll('.product-card.new').forEach(card => {
                card.classList.remove('new');
            });
        }, 500);
    }

    // Mostrar mensajes
    function showMessage(text, type) {
        const messageEl = document.createElement('div');
        messageEl.className = `message ${type}`;
        messageEl.textContent = text;

        messagesContainer.appendChild(messageEl);

        setTimeout(() => {
            messageEl.remove();
        }, 4000);
    }

    // Funci√≥n global para eliminar (accesible desde HTML)
    window.deleteProduct = deleteProduct;
</script>
